(x - fuzzy.division[i - 1]) / (fuzzy.division[i] - fuzzy.division[i - 1]),
(x - fuzzy.division[i + 1]) / (fuzzy.division[i] - fuzzy.division[i + 1])
)
)
}
)
}
# Test plot
x = seq(lower, upper, 0.01)
sapply(fuzzy.partition, function(f) sapply(x, f))
}
F.transform(1, 5.04, 0, 100)
F.transform <- function(f, smoothing, lower, upper) {
# Assertions
if (upper <= lower) {
warning('Upper bound cannot be less or equal than lower.')
return()
}
# Number of fuzzy sets in partition
n = ceiling((upper - lower) / smoothing)
# Division points
fuzzy.division = c(lower - smoothing / 2)  # Target length: n + 2. Contains c_0, c_1, c_2 ... c_n, c_{n+1}.
for (i in 1:n) {
fuzzy.division = c(fuzzy.division, smoothing * i + lower - smoothing / 2)
}
fuzzy.division = c(fuzzy.division, upper + smoothing / 2)
print(fuzzy.division)
# Fuzzy partition
fuzzy.partition = list(
function(x) {
ifelse(
x < fuzzy.division[0] || x > fuzzy.division[1],
0,
(x - fuzzy.division[1]) / (fuzzy.division[0] - fuzzy.division)
)
}
)
for (i in 1:(n+1)) {
fuzzy.partition = c(
fuzzy.partition,
function(x) {
ifelse(
x < fuzzy.division[i - 1] || x > fuzzy.division[i + 1],
0,
min(
(x - fuzzy.division[i - 1]) / (fuzzy.division[i] - fuzzy.division[i - 1]),
(x - fuzzy.division[i + 1]) / (fuzzy.division[i] - fuzzy.division[i + 1])
)
)
}
)
}
# Test plot
x = seq(lower, upper, 0.01)
sapply(x, fuzzy.partition[1])
}
F.transform(1, 5.04, 0, 100)
F.transform <- function(f, smoothing, lower, upper) {
# Assertions
if (upper <= lower) {
warning('Upper bound cannot be less or equal than lower.')
return()
}
# Number of fuzzy sets in partition
n = ceiling((upper - lower) / smoothing)
# Division points
fuzzy.division = c(lower - smoothing / 2)  # Target length: n + 2. Contains c_0, c_1, c_2 ... c_n, c_{n+1}.
for (i in 1:n) {
fuzzy.division = c(fuzzy.division, smoothing * i + lower - smoothing / 2)
}
fuzzy.division = c(fuzzy.division, upper + smoothing / 2)
print(fuzzy.division)
# Fuzzy partition
fuzzy.partition = list(
function(x) {
ifelse(
x < fuzzy.division[0] || x > fuzzy.division[1],
0,
(x - fuzzy.division[1]) / (fuzzy.division[0] - fuzzy.division)
)
}
)
for (i in 1:(n+1)) {
fuzzy.partition = c(
fuzzy.partition,
function(x) {
ifelse(
x < fuzzy.division[i - 1] || x > fuzzy.division[i + 1],
0,
min(
(x - fuzzy.division[i - 1]) / (fuzzy.division[i] - fuzzy.division[i - 1]),
(x - fuzzy.division[i + 1]) / (fuzzy.division[i] - fuzzy.division[i + 1])
)
)
}
)
}
# Test plot
x = seq(lower, upper, 0.01)
fuzzy.partition[1]
}
F.transform(1, 5.04, 0, 100)
F.transform <- function(f, smoothing, lower, upper) {
# Assertions
if (upper <= lower) {
warning('Upper bound cannot be less or equal than lower.')
return()
}
# Number of fuzzy sets in partition
n = ceiling((upper - lower) / smoothing)
# Division points
fuzzy.division = c(lower - smoothing / 2)  # Target length: n + 2. Contains c_0, c_1, c_2 ... c_n, c_{n+1}.
for (i in 1:n) {
fuzzy.division = c(fuzzy.division, smoothing * i + lower - smoothing / 2)
}
fuzzy.division = c(fuzzy.division, upper + smoothing / 2)
print(fuzzy.division)
# Fuzzy partition
fuzzy.partition = list(
function(x) {
ifelse(
x < fuzzy.division[0] || x > fuzzy.division[1],
0,
(x - fuzzy.division[1]) / (fuzzy.division[0] - fuzzy.division[1])
)
}
)
for (i in 1:(n+1)) {
fuzzy.partition = c(
fuzzy.partition,
function(x) {
ifelse(
x < fuzzy.division[i - 1] || x > fuzzy.division[i + 1],
0,
min(
(x - fuzzy.division[i - 1]) / (fuzzy.division[i] - fuzzy.division[i - 1]),
(x - fuzzy.division[i + 1]) / (fuzzy.division[i] - fuzzy.division[i + 1])
)
)
}
)
}
# Test plot
x = seq(lower, upper, 0.01)
fuzzy.partition[1]
}
F.transform(1, 5.04, 0, 100)
F.transform <- function(f, smoothing, lower, upper) {
# Assertions
if (upper <= lower) {
warning('Upper bound cannot be less or equal than lower.')
return()
}
# Number of fuzzy sets in partition
n = ceiling((upper - lower) / smoothing)
# Division points
fuzzy.division = c(lower - smoothing / 2)  # Target length: n + 2. Contains c_0, c_1, c_2 ... c_n, c_{n+1}.
for (i in 1:n) {
fuzzy.division = c(fuzzy.division, smoothing * i + lower - smoothing / 2)
}
fuzzy.division = c(fuzzy.division, upper + smoothing / 2)
print(fuzzy.division)
# Fuzzy partition
fuzzy.partition = list(
function(x) {
ifelse(
x < fuzzy.division[0] || x > fuzzy.division[1],
0,
(x - fuzzy.division[1]) / (fuzzy.division[0] - fuzzy.division[1])
)
}
)
for (i in 1:(n+1)) {
fuzzy.partition = c(
fuzzy.partition,
function(x) {
ifelse(
x < fuzzy.division[i - 1] || x > fuzzy.division[i + 1],
0,
min(
(x - fuzzy.division[i - 1]) / (fuzzy.division[i] - fuzzy.division[i - 1]),
(x - fuzzy.division[i + 1]) / (fuzzy.division[i] - fuzzy.division[i + 1])
)
)
}
)
}
# Test plot
x = seq(lower, upper, 0.01)
sapply(x, fuzzy.partition[1])
}
F.transform(1, 5.04, 0, 100)
F.transform <- function(f, smoothing, lower, upper) {
# Assertions
if (upper <= lower) {
warning('Upper bound cannot be less or equal than lower.')
return()
}
# Number of fuzzy sets in partition
n = ceiling((upper - lower) / smoothing)
# Division points
fuzzy.division = c(lower - smoothing / 2)  # Target length: n + 2. Contains c_0, c_1, c_2 ... c_n, c_{n+1}.
for (i in 1:n) {
fuzzy.division = c(fuzzy.division, smoothing * i + lower - smoothing / 2)
}
fuzzy.division = c(fuzzy.division, upper + smoothing / 2)
print(fuzzy.division)
# Fuzzy partition
fuzzy.partition = list(
function(x) {
ifelse(
x < fuzzy.division[0] || x > fuzzy.division[1],
0,
(x - fuzzy.division[1]) / (fuzzy.division[0] - fuzzy.division[1])
)
}
)
for (i in 1:(n+1)) {
fuzzy.partition = c(
fuzzy.partition,
function(x) {
ifelse(
x < fuzzy.division[i - 1] || x > fuzzy.division[i + 1],
0,
min(
(x - fuzzy.division[i - 1]) / (fuzzy.division[i] - fuzzy.division[i - 1]),
(x - fuzzy.division[i + 1]) / (fuzzy.division[i] - fuzzy.division[i + 1])
)
)
}
)
}
# Test plot
x = seq(lower, upper, 0.01)
fuzzy.partition[1]
}
F.transform(1, 5.04, 0, 100)
F.transform <- function(f, smoothing, lower, upper) {
# Assertions
if (upper <= lower) {
warning('Upper bound cannot be less or equal than lower.')
return()
}
# Number of fuzzy sets in partition
n = ceiling((upper - lower) / smoothing)
# Division points
fuzzy.division = c(lower - smoothing / 2)  # Target length: n + 2. Contains c_0, c_1, c_2 ... c_n, c_{n+1}.
for (i in 1:n) {
fuzzy.division = c(fuzzy.division, smoothing * i + lower - smoothing / 2)
}
fuzzy.division = c(fuzzy.division, upper + smoothing / 2)
print(fuzzy.division)
# Fuzzy partition
fuzzy.partition = list(
function(x) {
ifelse(
x < fuzzy.division[0] || x > fuzzy.division[1],
0,
(x - fuzzy.division[1]) / (fuzzy.division[0] - fuzzy.division[1])
)
}
)
for (i in 1:(n+1)) {
fuzzy.partition = c(
fuzzy.partition,
function(x) {
ifelse(
x < fuzzy.division[i - 1] || x > fuzzy.division[i + 1],
0,
min(
(x - fuzzy.division[i - 1]) / (fuzzy.division[i] - fuzzy.division[i - 1]),
(x - fuzzy.division[i + 1]) / (fuzzy.division[i] - fuzzy.division[i + 1])
)
)
}
)
}
# Test plot
x = seq(lower, upper, 0.01)
return(fuzzy.partition)
}
p = F.transform(1, 5.04, 0, 100)
p[1]
p1 = p[1]
p1 = p[[1]]
View(p1)
p = F.transform(1, 50, 0, 100)
F.transform <- function(f, smoothing, lower, upper) {
# Assertions
if (upper <= lower) {
warning('Upper bound cannot be less or equal than lower.')
return()
}
# Number of fuzzy sets in partition
n = ceiling((upper - lower) / smoothing)
# Division points
fuzzy.division = c(lower - smoothing / 2)  # Target length: n + 2. Contains c_0, c_1, c_2 ... c_n, c_{n+1}.
for (i in 1:n) {
fuzzy.division = c(fuzzy.division, smoothing * i + lower - smoothing / 2)
}
fuzzy.division = c(fuzzy.division, upper + smoothing / 2)
print(fuzzy.division)
# Fuzzy partition
fuzzy.partition = list(
function(x) {
ifelse(
x < fuzzy.division[0] || x > fuzzy.division[1],
0,
(x - fuzzy.division[1]) / (fuzzy.division[0] - fuzzy.division[1])
)
}
)
for (i in 1:(n+1)) {
fuzzy.partition = c(
fuzzy.partition,
function(x) {
ifelse(
x < fuzzy.division[i - 1] || x > fuzzy.division[i + 1],
0,
min(
(x - fuzzy.division[i - 1]) / (fuzzy.division[i] - fuzzy.division[i - 1]),
(x - fuzzy.division[i + 1]) / (fuzzy.division[i] - fuzzy.division[i + 1])
)
)
}
)
}
# Test plot
x = seq(lower, upper, 0.01)
sapply(fuzzy.partition, function(f) sapply(x, f))
}
F.transform(1, 50, 0, 100)
F.transform <- function(f, smoothing, lower, upper) {
# Assertions
if (upper <= lower) {
warning('Upper bound cannot be less or equal than lower.')
return()
}
# Number of fuzzy sets in partition
n = ceiling((upper - lower) / smoothing)
# Division points
fuzzy.division = c(lower - smoothing / 2)  # Target length: n + 2. Contains c_0, c_1, c_2 ... c_n, c_{n+1}.
for (i in 1:n) {
fuzzy.division = c(fuzzy.division, smoothing * i + lower - smoothing / 2)
}
fuzzy.division = c(fuzzy.division, upper + smoothing / 2)
print(fuzzy.division)
# Fuzzy partition
fuzzy.partition = list(
function(x) {
ifelse(
x < fuzzy.division[0] || x > fuzzy.division[1],
0,
(x - fuzzy.division[1]) / (fuzzy.division[0] - fuzzy.division[1])
)
}
)
for (i in 1:(n+1)) {
fuzzy.partition = c(
fuzzy.partition,
function(x) {
ifelse(
x < fuzzy.division[i - 1] || x > fuzzy.division[i + 1],
0,
min(
(x - fuzzy.division[i - 1]) / (fuzzy.division[i] - fuzzy.division[i - 1]),
(x - fuzzy.division[i + 1]) / (fuzzy.division[i] - fuzzy.division[i + 1])
)
)
}
)
}
# Test plot
x = seq(lower, upper, 1)
sapply(fuzzy.partition, function(f) sapply(x, f))
}
F.transform(1, 50, 0, 100)
F.transform <- function(f, smoothing, lower, upper) {
# Assertions
if (upper <= lower) {
warning('Upper bound cannot be less or equal than lower.')
return()
}
# Number of fuzzy sets in partition
n = ceiling((upper - lower) / smoothing)
# Division points
fuzzy.division = c(lower - smoothing / 2)  # Target length: n + 2. Contains c_0, c_1, c_2 ... c_n, c_{n+1}.
for (i in 1:n) {
fuzzy.division = c(fuzzy.division, smoothing * i + lower - smoothing / 2)
}
fuzzy.division = c(fuzzy.division, upper + smoothing / 2)
print(fuzzy.division)
# Fuzzy partition
fuzzy.partition = list(
function(x) {
ifelse(
x < fuzzy.division[0] || x > fuzzy.division[1],
0,
(x - fuzzy.division[1]) / (fuzzy.division[0] - fuzzy.division[1])
)
}
)
for (i in 1:(n+1)) {
fuzzy.partition = c(
fuzzy.partition,
function(x) {
ifelse(
x < fuzzy.division[i - 1] || x > fuzzy.division[i + 1],
0,
min(
(x - fuzzy.division[i - 1]) / (fuzzy.division[i] - fuzzy.division[i - 1]),
(x - fuzzy.division[i + 1]) / (fuzzy.division[i] - fuzzy.division[i + 1])
)
)
}
)
}
print(fuzzy.partition)
# Test plot
x = seq(lower, upper, 1)
sapply(fuzzy.partition, function(f) sapply(x, f))
}
F.transform(1, 50, 0, 100)
setwd("~/Programowanie/Python/Metalurgy")
# Próbujemy jakieś modele do prognozowania składu grafitowego (kuleczki)
metal = read_csv('data/processed/graphite_model.csv', header = T)
# Próbujemy jakieś modele do prognozowania składu grafitowego (kuleczki)
metal = read.csv('data/processed/graphite_model.csv', header = T)
View(metal)
model = lm(graphite_precipitation~.-spheroid_diameter-nodularity, data = metal)
summary(model)
# Próbujemy jakieś modele do prognozowania składu grafitowego (kuleczki)
metal = read.csv('data/processed/graphite_model.csv', header = T)
model = lm(graphite_precipitation~.-spheroid_diameter-nodularity, data = metal)
summary(model)
metal = metal[1:13]
model = lm(graphite_precipitation~., data = metal)
summary(model)
step(model, direction('forward'))
step(model, direction = 'forward')
step(model, direction = 'backward')
model.maly = step(model, direction = 'backward')
summary(model.maly)
#
plot(graphite_precipitation~silicon, data = metal)
plot(graphite_precipitation~silicon, data = metal)
plot(graphite_precipitation~phosphorus, data = metal)
plot(graphite_precipitation~manganese, data = metal)
plot(graphite_precipitation~copper, data = metal)
hatvalues(model.maly)
hval = hatvalues(model.maly)
hval[order(hval)]
residuals(model.maly)
residuals(model.maly, type = 'pre')
summary(model.maly)
SSE = sum((metal$graphite_precipitation - model.maly$fitted.values)^2)
SSE = sqrt(sum((metal$graphite_precipitation - model.maly$fitted.values)^2))
SSE = sum(model.maly$residuals^2)
S2 = SSE / (nrow(metal) - 5)
res.stud = model.maly$residuals / sqrt(S2 * (1 - hatvalues(model.maly)))
res.stud
# Próbujemy jakieś modele do prognozowania składu grafitowego (kuleczki)
metal = read.csv('data/processed/graphite_model.csv', header = T, subset = -c(82))
model = lm(graphite_precipitation~., data = metal, subset = -82)
summary(model)
model.maly = step(model, direction = 'backward')
summary(model.maly)
SSE = sum(model.maly$residuals^2)
S2 = SSE / (nrow(metal) - 5)
res.stud = model.maly$residuals / sqrt(S2 * (1 - hatvalues(model.maly)))
res.stud # Obserwacja 82 XDDD
source("~/.active-rstudio-document", encoding = 'UTF-8', echo=TRUE)
# Teraz jazda z PCA
prcomp(metal)
?apply
# Teraz jazda z PCA
metal.scaled = apply(metal.scaled, 2, FUN = function(x) (x - mean(x) / sd(x)))
apply(metal, 2, FUN = function(x) (x - mean(x) / sd(x)))
# Teraz jazda z PCA
metal.scaled = apply(metal, 2, FUN = function(x) (x - mean(x) / sd(x)))
View(metal.scaled)
# Teraz jazda z PCA
metal.scaled = apply(metal, 2, FUN = function(x) (x - mean(x)) / sd(x))
# Teraz jazda z PCA
metal.scaled = data.frame(apply(metal, 2, FUN = function(x) (x - mean(x)) / sd(x)))
View(metal.scaled)
# Teraz jazda z PCA
princomp(metal, cor = T, scores = T)
# Teraz jazda z PCA
pcomps = princomp(metal, cor = T, scores = T)
pcomps = prcomp(metal, scale = T)
# Teraz jazda z PCA
pcomps = princomp(metal, cor = T, scores = T)
cumsum(pcomps$scale)
# Teraz jazda z PCA
pcomps = princomp(metal[1:12], cor = T, scores = T)
cumsum(pcomps$scale)
cumsum(pcomps$sdev)
summary(pcomps)
summary(model.maly)
# Czyżby fosfor i magnez były zależne?
plot(phosphorus~magnesium, data = metal)
model.maly = step(model, direction = 'forward')
summary(model.maly)
model.maly = step(model, direction = 'backward')
summary(model.maly)
# Czyżby fosfor i magnez były zależne?
plot(graphite_precipitation~magnesium, data = metal)
metal = metal[-82, 1:13]
# Czyżby fosfor i magnez były zależne?
plot(graphite_precipitation~magnesium, data = metal)
plot(graphite_precipitation~manganese, data = metal)
